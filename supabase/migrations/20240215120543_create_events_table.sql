create type public.app_role as enum ('admin', 'participant');
create type public.app_permission as enum ('events.create', 'events.delete');
create type public.event_status as enum (
  'draft',
  'reserving',
  'reservations-closed',
  'cancelled',
  'completed'
);
create type public.event_categories as enum (
  'speed-dating',
  'retreats'
);
create type public.currencies as enum (
  'sgd'
);
-- ........
-- PROFILE
-- ........
create table public.profiles (
  id                uuid not null primary key,
  name              text not null,
  avatar_url        text,
  birthmonth        integer not null,
  birthyear         integer not null,
  foreign key       (id) references auth.users(id) on delete cascade
);
comment on table public.profiles is 'Profile data for each user.';
comment on column public.profiles.id is 'References the internal Supabase Auth user.';
-- ............
-- USER ROLES
-- ............
create table public.user_roles (
  id                bigint generated by default as identity primary key,
  user_id           uuid references public.profiles on delete cascade not null,
  role              app_role not null,
  unique            (user_id, role)
);
comment on table public.user_roles is 'Application roles for each user.';
-- ..................
-- ROLE PERMISSIONS
-- ..................
create table public.role_permissions (
  id                bigint generated by default as identity primary key,
  role              app_role not null,
  permission        app_permission not null,
  unique            (role, permission)
);
comment on table public.role_permissions is 'Application permissions for each role.';
-- .........
-- EVENTS
-- .........
create table public.events (
  id                uuid not null default gen_random_uuid() primary key,
  status            event_status not null default 'draft',
  user_id           uuid references public.profiles (id) not null,
  date_start        date not null,
  date_end          date not null,
  category          event_categories not null default 'speed-dating',
  location          text not null,
  location_country  text not null,
  name              text not null,
  description       text,
  price             integer,
  price_currency    currencies not null default 'sgd',
  image_url         varchar(255),
  created_at        timestamp with time zone default timezone('utc'::text, now()) not null
);
comment on table public.events is 'Details for each event.';

create table public.event_participants (
  event_id          uuid not null,
  user_id           uuid not null,
  primary key       (event_id, user_id),
  constraint        fk_event
    foreign key     (event_id) 
    references      public.events (id)
    on delete cascade,
  constraint        fk_user
    foreign key     (user_id)
    references      public.profiles (id)
    on delete cascade
);
comment on table public.event_participants is 'List of user IDs participating in an event.';

-- ....................
--
-- STORAGE
--
-- ....................
insert into storage.buckets (id, name)
values ('avatars', 'avatars');


-- ...........
--
-- FUNCTIONS
--
-- ...........

-- Authorize with role - based access control (RBAC)
create or replace function public.authorize(
    requested_permission app_permission,
    user_id uuid
  ) returns boolean as $$
declare bind_permissions int;
begin
select count(*)
from public.role_permissions
  inner join public.user_roles on role_permissions.role = user_roles.role
where role_permissions.permission = authorize.requested_permission
  and user_roles.user_id = authorize.user_id into bind_permissions;
return bind_permissions > 0;
end;
$$ language plpgsql security definer;

-- Automatically reates a user entry when a new user signs up via Supabase Auth.
create or replace function public.handle_new_user() returns trigger as $$ 
begin
  insert into public.profiles (id, name, avatar_url, birthmonth, birthyear)
  values (
      new.id,
      new.raw_user_meta_data->>'name',
      new.raw_user_meta_data->>'avatar_url',
      new.raw_user_meta_data['birthmonth']::integer,
      new.raw_user_meta_data['birthyear']::integer
    );
  return new;
end;
$$ language plpgsql security definer;

create or replace trigger on_auth_user_created
  after insert on auth.users for each row 
  execute procedure public.handle_new_user();


-- ...................
--
-- Secure the tables
--
-- ...................

-- public.profiles
alter table public.profiles enable row level security;
alter table public.user_roles enable row level security;
alter table public.role_permissions enable row level security;
create policy "Public profiles are viewable by everyone." on profiles for select using (true);
create policy "Users can insert their own profile." on profiles for insert with check (auth.uid() = id);
create policy "Users can update own profile." on profiles for update using (auth.uid() = id);

-- storage
create policy "Avatar images are publicly accessible." on storage.objects for
select using (bucket_id = 'avatars');
create policy "Anyone can upload an avatar." on storage.objects for
insert with check (bucket_id = 'avatars');

-- events
alter table events enable row level security;
create policy "Individuals can create events." on events for
insert with check (auth.uid() = user_id);
create policy "Individuals can view their own events. " on events for
select using (auth.uid() = user_id);
create policy "Individuals can update their own events." on events for
update using (auth.uid() = user_id);
create policy "Individuals can delete their own events." on events for delete using (auth.uid() = user_id);
create policy "Authorized user can delete any event." on events for delete using (authorize('events.delete', auth.uid()));