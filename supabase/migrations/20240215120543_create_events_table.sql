create type public.app_role as enum ('admin', 'participant');
create type public.app_permission as enum ('events.create', 'events.delete');
create type public.event_status as enum (
  'draft',
  'in progress',
  'confirmed',
  'cancelled',
  'completed'
);
-- .......
-- USERS
-- .......
create table users (
  id            uuid references auth.users on delete cascade not null primary key,
  updated_at    timestamp with time zone,
  username      text unique,
  password      text,
  name          text not null,
  avatar_url    text,
  website       text,
  constraint    username_length check (char_length(username) >= 3)
);
comment on table public.users is 'Profile data for each user.';
comment on column public.users.id is 'References the internal Supabase Auth user.';
-- ............
-- USER ROLES
-- ............
create table public.user_roles (
  id            bigint generated by default as identity primary key,
  user_id       uuid references public.users on delete cascade not null,
  role          app_role not null,
  unique        (user_id, role)
);
comment on table public.user_roles is 'Application roles for each user.';
-- ..................
-- ROLE PERMISSIONS
-- ..................
create table public.role_permissions (
  id            bigint generated by default as identity primary key,
  role          app_role not null,
  permission    app_permission not null,
  unique        (role, permission)
);
comment on table public.role_permissions is 'Application permissions for each role.';
-- .........
-- EVENTS
-- .........
create table public.events (
  id            uuid not null default gen_random_uuid (),
  status        event_status not null default 'draft',
  user_id       uuid references public.users (id) not null,
  date_start    date not null,
  date_end      date not null,
  category      text,
  location      text not null,
  name          text not null,
  description   text,
  image_url     varchar(255),
  created_at    timestamp with time zone default timezone ('utc'::text, now()) not null
);


-- ....................
--
-- STORAGE
--
-- ....................
insert into storage.buckets (id, name)
values ('avatars', 'avatars');


-- ...........
--
-- FUNCTIONS
--
-- ...........

-- Authorize with role - based access control (RBAC)
create or replace function public.authorize(
    requested_permission app_permission,
    user_id uuid
  ) returns boolean as $$
declare bind_permissions int;
begin
select count(*)
from public.role_permissions
  inner join public.user_roles on role_permissions.role = user_roles.role
where role_permissions.permission = authorize.requested_permission
  and user_roles.user_id = authorize.user_id into bind_permissions;
return bind_permissions > 0;
end;
$$ language plpgsql security definer;

-- Automatically reates a user entry when a new user signs up via Supabase Auth.
create or replace function public.handle_new_user() returns trigger as $$ begin
insert into public.users (id, name, avatar_url)
values (
    new.id,
    new.raw_user_meta_data->>'name',
    new.raw_user_meta_data->>'avatar_url'
  );
return new;
end;
$$ language plpgsql security definer;

create or replace trigger on_auth_user_created
after insert on auth.users for each row 
execute procedure public.handle_new_user();


-- ...................
--
-- Secure the tables
--
-- ...................

-- public.users
alter table public.users enable row level security;
alter table public.user_roles enable row level security;
alter table public.role_permissions enable row level security;
create policy "Public users are viewable by everyone." on users for
select using (true);
create policy "Users can insert their own profile." on users for
insert with check (auth.uid() = id);
create policy "Users can update own profile." on users for
update using (auth.uid() = id);

-- storage
create policy "Avatar images are publicly accessible." on storage.objects for
select using (bucket_id = 'avatars');
create policy "Anyone can upload an avatar." on storage.objects for
insert with check (bucket_id = 'avatars');

-- events
alter table events enable row level security;
create policy "Individuals can create events." on events for
insert with check (auth.uid() = user_id);
create policy "Individuals can view their own events. " on events for
select using (auth.uid() = user_id);
create policy "Individuals can update their own events." on events for
update using (auth.uid() = user_id);
create policy "Individuals can delete their own events." on events for delete using (auth.uid() = user_id);
create policy "Authorized user can delete any event." on events for delete using (authorize('events.delete', auth.uid()));

-- ..............
--
-- Seeding data
--
-- ..............
insert into public.role_permissions (role, permission)
values ('admin', 'events.create'),
  ('admin', 'events.delete');